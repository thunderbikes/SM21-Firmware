// Arduino Code to control Relay System for the SM-23. 
const int RL1 = 2;  // Operation
const int RL3 = 3;  // Ignition
const int RL4 = 4;  // Discharge
const int RL6 = 5;  // Charging
const int charge_input = 6;   // Charge Button
const int main_input = 7;     // Ignition Keys
const int forward_input = 8;  // Forward 
const int reverse_input = 9;  // Reverse
int charge_state = LOW;
int main_state = LOW;
int forward_state = LOW;
int reverse_state = LOW;
int park_input = 0;  // Park
int voltage = 0;     // Voltage value read by the Arduino
int operation = 0;   // Indicates whether the ignition process has occurred yet

void setup() {
  pinMode(RL1, OUTPUT);
  pinMode(RL3, OUTPUT);
  pinMode(RL4, OUTPUT);
  pinMode(RL6, OUTPUT);
  pinMode(charge_input, INPUT_PULLUP);
  pinMode(main_input, INPUT_PULLUP);
  pinMode(forward_input, INPUT_PULLUP);  
  pinMode(reverse_input, INPUT_PULLUP);

  Serial.begin(9600);
  allRelaysOpen();

  charge_state = digitalRead(charge_input);
  main_state = digitalRead(main_input);
  forward_state = digitalRead(forward_input);  
  reverse_state = digitalRead(reverse_input);
}

void loop() {
  allDigitalRead();

  park_input = park(forward_state, reverse_state);

  voltage = (144 * 5 * analogRead(A0)) / 1024;  // Gives the voltage. Is the 144 still accurate with fewer modules

  // CHARGING
  if (charge_state == HIGH && park(forward_state, reverse_state) == 1) {
    allRelaysOpen();
    delay(1000);
    digitalWrite(RL6, HIGH);
    while (charge_state == HIGH) {
      allDigitalRead();
      Serial.println("Charging");
    }
    allRelaysOpen();
    delay(2000);
  }

  // IGNITION
  else if (main_state == HIGH && park_input == 1 && operation == 0) {
    allRelaysOpen();
    digitalWrite(RL3, HIGH);
    Serial.println("Ignition started");
    delay(5000);
    operation = 1;
    Serial.println("Ignition completed");
    allRelaysOpen();
    delay(2000);
  }

  // OPERATION
  else if (main_state == HIGH && operation == 1 && park(forward_state, reverse_state) == 0) {
    allRelaysOpen();
    digitalWrite(RL1, HIGH);
    while (main_state == HIGH && operation == 1 && park(forward_state, reverse_state) == 0) {
      allDigitalRead();
    }
    allRelaysOpen();
    delay(2000);
  }

  // DISCHARGE
  else if (main_state == LOW && park(forward_state, reverse_state) == 1 && charge_state == LOW && operation == 1) {
    allRelaysOpen();
    digitalWrite(RL4, HIGH);
    delay(5000);
    allRelaysOpen();
    operation = 0;
    Serial.println("Discharged");
    delay(2000);
  }

  // EDGE CASES
  else if (main_state == HIGH && park(forward_state, reverse_state) == 1) {
    main_state = digitalRead(main_input);
    Serial.println(main_state);
    while (main_state == HIGH && park(forward_state, reverse_state) == 1) {
      allDigitalRead();
      delay(1000);
      allDigitalRead();
      Serial.println("In park but Bike stays on");
    }
  }

  // Error Case
  else {
    delay(1000);
    Serial.println("Not a valid state: ERROR");
  }
}

// Function to determine if bike is in park or not.
int park(int forward_input, int reverse_input) {
  return (forward_input == LOW && reverse_input == LOW) ? 1 : 0;
}

// Opens all relays 
void allRelaysOpen() {
  digitalWrite(RL1, LOW);
  digitalWrite(RL3, LOW);
  digitalWrite(RL4, LOW);
  digitalWrite(RL6, LOW);
  delay(1000);
}

void allDigitalRead() {
  charge_state = digitalRead(charge_input);
  main_state = digitalRead(main_input);
  forward_state = digitalRead(forward_input);  
  reverse_state = digitalRead(reverse_input);
}
